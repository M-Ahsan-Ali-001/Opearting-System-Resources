#include <iostream>
using namespace std;


struct SJF{
    
        int* AT,
            * BT, 
            * CT,
            * TAT,
            * WT,
            * POS,
            n,
            HOLD;

};

int main()
{
    SJF finder;




    cout << "Enter total number of process:";
    cin >> finder.n;

    finder.AT = new int[finder.n];
    finder.BT = new int[finder.n];
    finder.POS = new int[finder.n];
    finder.CT = new int[finder.n];
    finder.TAT = new int[finder.n];
    finder.WT = new int[finder.n];

    for (int i = 0; i < finder.n; i++)
    {
        cout << "ENTER AT" << i + 1 << ":";
        cin >> finder.AT[i];
        finder.POS[i] = i;
    }

    for (int i = 0; i < finder.n; i++)
    {
        cout << "ENTER BT" << i + 1 << ":";
        cin >> finder.BT[i];


    }

    //sort

    for (int i = 0; i < finder.n - 1; i++)
    {
        for (int j = i + 1; j < finder.n; j++) {

            if (finder.BT[i] > finder.BT[j]) {
                int tempBT = finder.BT[j];
                finder.BT[j] = finder.BT[i];
                finder.BT[i] = tempBT;


                int tempAT = finder.AT[j];
                finder.AT[j] = finder.AT[i];
                finder.AT[i] = tempAT;

                int tempPOS = finder.POS[j];
                finder.POS[j] = finder.POS[i];
                finder.POS[i] = tempPOS;
            }
        }

    }

    /* cout<<"\ntestprint\n";
       for(int i=0;i<n;i++)
   {
       cout<<AT[i]<<"\t"<<BT[i]<<endl;
   }*/

    int low = finder.AT[0], idx = 0;
    for (int i = 1; i < finder.n; i++)
    {

        // cout<<"\n"<<low<<" "<<AT[i]<<endl;
        if (low > finder.AT[i] || (low == finder.AT[i] && finder.BT[i - 1] > finder.BT[i])) {
            low = finder.AT[i];
            idx = i;
            cout << "\nFound\n";
            //  cout<<"\nnow low is :"<<low<<endl;
        }


        if (i + 1 == finder.n) {
            //cout<<"\nhere\n";

            int tempBT = finder.BT[0];
            finder.BT[0] = finder.BT[idx];
            finder.BT[idx] = tempBT;


            int tempAT = finder.AT[0];
            finder.AT[0] = finder.AT[idx];
            finder.AT[idx] = tempAT;

            int tempPOS = finder.POS[0];
            finder.POS[0] = finder.POS[idx];
            finder.POS[idx] = tempPOS;
        }
    }

    /* cout<<"\n2testprint\n";
      for(int i=0;i<n;i++)
  {
      cout<<AT[i]<<"\t"<<BT[i]<<endl;
  }*/

    for (int i = 1; i < finder.n; i++)
    {
        for (int j = i + 1; j < finder.n - 1; j++) {

            if ((finder.AT[i] > finder.AT[j] && (finder.AT[j] < (finder.AT[i] + finder.BT[i]) &&
                (finder.BT[j] < finder.BT[i]))
                )
                ||
                ((finder.AT[i] < finder.AT[j])
                    &&
                    ((finder.BT[j] < finder.BT[i]) &&
                        (finder.AT[j] < (finder.AT[i] + finder.BT[i]))
                        )
                    )
                )
            {

                //  cout<<"ATi:"<<AT[i]<<" BTi :"<<BT[i]<<"ATj:"<<AT[j]<<" BTj :"<<BT[j]<<endl;  
                int tempBT = finder.BT[j];
                finder.BT[j] = finder.BT[i];
                finder.BT[i] = tempBT;


                int tempAT = finder.AT[j];
                finder.AT[j] = finder.AT[i];
                finder.AT[i] = tempAT;

                int tempPOS = finder.POS[j];
                finder.POS[j] = finder.POS[i];
                finder.POS[i] = tempPOS;

            }// if statement closing

        }//inner loop closing

    }


    //Complettion Time(CT) calculation
    finder.CT[0] = finder.BT[0] + finder.AT[0];
    for (int i = 1; i < finder.n; i++)
    {

        finder.CT[i] = finder.BT[i] + finder.CT[i - 1];
       finder.CT[1] = finder.BT[1] + finder.CT[0];
    }
    //TAT
    for (int i = 0; i < finder.n; i++)
    {
        finder.TAT[i] = finder.CT[i] - finder.AT[i];
        finder.WT[i] = finder.TAT[i] - finder.BT[i];


    }
    cout << "Pno\tAT\tBT\tCT\tTAT\tWT\n" << endl;

    for (int i = 0; i < finder.n; i++) {

        for (int y = 0; y < finder.n; y++)
        {
            if (i == finder.POS[y])
            {
                finder.HOLD = y;
            }


        }


        cout << "P" << i + 1 << "\t" << finder.AT[finder.HOLD] << "\t" << finder.BT[finder.HOLD] << "\t" << finder.CT[finder.HOLD] << "\t" << finder.TAT[finder.HOLD] << "\t" << finder.WT[finder.HOLD] << endl;

    }


}